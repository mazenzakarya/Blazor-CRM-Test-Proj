@page "/contacts"
@page "/contacts/customer/{CustomerId:int}"
@page "/contacts/add/{CustomerId:int}"
@using Blazor_CRM_Test_Proj.Models
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Customer Contacts - CRM</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Customer Contacts</h2>
                <div>
                    <button class="btn btn-primary" @onclick="ShowAddContactModal">
                        <i class="bi bi-plus-circle"></i> Add Contact
                    </button>
                    <a href="/customers/@CustomerId" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left"></i> Back to Customer
                    </a>
                </div>
            </div>

            <!-- Contacts Table -->
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>Date</th>
                            <th>Subject</th>
                            <th>Type</th>
                            <th>Message</th>
                            <th>Follow-up</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (contacts != null && contacts.Any())
                        {
                            @foreach (var contact in contacts)
                            {
                                <tr>
                                    <td>@contact.ContactDate.ToString("MMM dd, yyyy")</td>
                                    <td>@contact.Subject</td>
                                    <td>
                                        <span class="badge bg-info">@contact.ContactType</span>
                                    </td>
                                    <td>@(contact.Message.Length > 50 ? contact.Message.Substring(0, 50) + "..." : contact.Message)</td>
                                    <td>
                                        @if (contact.IsFollowUpRequired)
                                        {
                                            <span class="badge bg-warning">Required</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewContact(contact.Id)" title="View Details">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => EditContact(contact)" title="Edit">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteContact(contact.Id)" title="Delete">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="6" class="text-center text-muted">
                                    @if (isLoading)
                                    {
                                        <div class="spinner-border spinner-border-sm" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                        <span>Loading contacts...</span>
                                    }
                                    else
                                    {
                                        <span>No contacts found for this customer.</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Contact Modal -->
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" role="dialog" aria-modal="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditing ? "Edit Contact" : "Add Contact")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="currentContact" OnValidSubmit="SaveContact" OnInvalidSubmit="OnInvalidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label for="subject" class="form-label">Subject *</label>
                            <InputText id="subject" class="form-control" @bind-Value="currentContact.Subject" />
                            <ValidationMessage For="@(() => currentContact.Subject)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="contactType" class="form-label">Contact Type *</label>
                            <InputSelect id="contactType" class="form-control" @bind-Value="currentContact.ContactType">
                                <option value="">Select Type</option>
                                <option value="Phone">Phone</option>
                                <option value="Email">Email</option>
                                <option value="Meeting">Meeting</option>
                                <option value="Video Call">Video Call</option>
                                <option value="Other">Other</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => currentContact.ContactType)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="message" class="form-label">Message *</label>
                            <InputTextArea id="message" class="form-control" rows="4" @bind-Value="currentContact.Message" />
                            <ValidationMessage For="@(() => currentContact.Message)" class="text-danger" />
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-check mb-3">
                                    <InputCheckbox id="isFollowUpRequired" class="form-check-input" @bind-Value="currentContact.IsFollowUpRequired" />
                                    <label class="form-check-label" for="isFollowUpRequired">
                                        Follow-up Required
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                @if (currentContact.IsFollowUpRequired)
                                {
                                    <div class="mb-3">
                                        <label for="followUpDate" class="form-label">Follow-up Date</label>
                                        <InputDate id="followUpDate" class="form-control" @bind-Value="currentContact.FollowUpDate" />
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                @(isEditing ? "Update" : "Create") Contact
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int CustomerId { get; set; }

    private List<Contact>? contacts;
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditing = false;
    private bool isSaving = false;
    private Contact currentContact = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadContacts();
    }

    private async Task LoadContacts()
    {
        isLoading = true;
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            contacts = await httpClient.GetFromJsonAsync<List<Contact>>($"api/contacts/customer/{CustomerId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading contacts: {ex.Message}");
            contacts = new List<Contact>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowAddContactModal()
    {
        currentContact = new Contact { CustomerId = CustomerId };
        isEditing = false;
        showModal = true;
    }

    private void EditContact(Contact contact)
    {
        currentContact = new Contact
        {
            Id = contact.Id,
            Subject = contact.Subject,
            Message = contact.Message,
            ContactType = contact.ContactType,
            IsFollowUpRequired = contact.IsFollowUpRequired,
            FollowUpDate = contact.FollowUpDate,
            CustomerId = contact.CustomerId
        };
        isEditing = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentContact = new Contact();
        isEditing = false;
        isSaving = false;
    }

    private async Task SaveContact()
    {
        Console.WriteLine("SaveContact method called!");
        Console.WriteLine($"Contact data: {currentContact.Subject} - {currentContact.ContactType} - CustomerId: {currentContact.CustomerId}");
        
        isSaving = true;
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            if (isEditing)
            {
                Console.WriteLine($"Updating contact with ID: {currentContact.Id}");
                var response = await httpClient.PutAsJsonAsync($"api/contacts/{currentContact.Id}", currentContact);
                if (!response.IsSuccessStatusCode)
                {
                    var error = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Error updating contact: {error}");
                    await JS.InvokeAsync<string>("alert", $"Error updating contact: {error}");
                    return;
                }
                Console.WriteLine("Contact updated successfully!");
            }
            else
            {
                Console.WriteLine("Creating new contact...");
                var response = await httpClient.PostAsJsonAsync("api/contacts", currentContact);
                if (response.IsSuccessStatusCode)
                {
                    currentContact = await response.Content.ReadFromJsonAsync<Contact>() ?? new Contact();
                    Console.WriteLine($"Contact created successfully with ID: {currentContact.Id}");
                    await JS.InvokeAsync<string>("alert", "Contact created successfully!");
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Error creating contact: {error}");
                    await JS.InvokeAsync<string>("alert", $"Error creating contact: {error}");
                    return;
                }
            }

            CloseModal();
            await LoadContacts();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving contact: {ex.Message}");
            await JS.InvokeAsync<string>("alert", $"Error: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteContact(int contactId)
    {
        if (await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this contact?"))
        {
            try
            {
                var httpClient = HttpClientFactory.CreateClient("ApiClient");
                var response = await httpClient.DeleteAsync($"api/contacts/{contactId}");
                if (response.IsSuccessStatusCode)
                {
                    await LoadContacts();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    await JS.InvokeAsync<string>("alert", $"Error deleting contact: {error}");
                }
            }
            catch (Exception ex)
            {
                await JS.InvokeAsync<string>("alert", $"Error: {ex.Message}");
            }
        }
    }

    private void ViewContact(int contactId)
    {
        // For now, just show an alert. You can create a detailed view later
        JS.InvokeAsync<string>("alert", $"Contact ID: {contactId}");
    }

    private void OnInvalidSubmit()
    {
        Console.WriteLine("Contact form validation failed!");
        JS.InvokeAsync<string>("alert", "Please fill in all required fields correctly.");
    }
}
